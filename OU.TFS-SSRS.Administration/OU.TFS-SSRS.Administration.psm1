$Purpose = 'IM TFS-SSRS Administration'

function Set-SsrsPolicy() {
<#
	.SYNOPSIS
		Modifies the security permissions for a specified SSRS folder.

	.DESCRIPTION
		The Set-SsrsPolicy cmdlet sets the security permissions for a specified SSRS folder.
        It provisions a specified user or security group to SSRS folder with specified roles.
        It breaks the inheritance from parent while setting permissions for folder.

	.PARAMETER  GroupUserName
		Specifies the name of Security Group or User to be provisioned.

	.PARAMETER  GroupUserRoles
		Specifies the roles with which user needs to be provisioned. This is an Array of string holding one or multiple roles. 
        The acceptable values are: 
        -- "Browser"
        -- "Publisher"
        -- "Report Builder"
        -- "Content Manager"
    
    .PARAMETER  InheritParent
        Specifies a boolean to be used while retrieving current security policies of specified SSRS folder.
        This is optional and default is TRUE.
        A security policy in SSRS is a combination of user and roles.
        
    .PARAMETER  ProjectReportsPath
        Specifies the parent folder where concerned SSRS folder is located.
        SSRS Api is used to enumerate all folders located under this path and filtered for TFSProjectName parameter.
        Usually it is: /TfsReports/{TFScollectionName}
        
    .PARAMETER  ReportServerUri
        Specifies the URI of SSRS web service.
        Usually it is: http://{SVRname}/ReportServer/ReportService2010.asmx

    .PARAMETER  TFSProjectName
        Specifies the name of target SSRS folder whose security needs to be configured.
        
    .PARAMETER  UserCredential
        Specifies the credential object who has administrative access to SSRS server. This account is used to query and set the permissions.
        This is optional parameter. If not specified, current user's identity (-UseDefaultCredentials flag) would be used.

	.EXAMPLE
		PS C:\> Set-SsrsPolicy -GroupUserName "ADgroupname" -GroupUserRoles "@('BROWSER')" -TFSProjectName "{SSRSFOLDER}" -ReportServerUri "http://{SVRname}/ReportServer/ReportService2010.asmx" -ProjectReportsPath "/TfsReports/{TFScollectionName}"

	.EXAMPLE
		PS C:\> Set-SsrsPolicy -GroupUserName "domain\userid" -GroupUserRoles "@('BROWSER', 'PUBLISHER')" -TFSProjectName "{SSRSFOLDER}" -InheritParent $true -ReportServerUri "http://{SVRname}/ReportServer/ReportService2010.asmx" -ProjectReportsPath "/TfsReports/{TFScollectionName}" -UserCredential "{PSCredentioanObject}" 

	.INPUTS
		None.

	.OUTPUTS
		HashTable
        Set-SsrsPolicy returns a HashTable that contains the STATUS or EXCEPTION which are set while invoking SSRS Api.
        STATUS holds SetPolicies() method results. May be blank if successful.
        EXCEPTION holds any exception thrown in method invocation.

	.NOTES
		None.

	.LINK
		For more info about SSRS policy: https://msdn.microsoft.com/en-us/library/ms152787(v=sql.110).aspx
#>

    #region Parameters
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true, Position=1)]
        [string]
        $GroupUserName,
        
        [Parameter(Mandatory=$true, Position=2)]
        [ValidateSet('Browser', 'Publisher', 'Report Builder', 'Content Manager')]
        [System.Object[]]
        $GroupUserRoles,
        
        [Parameter(Mandatory=$true, Position=3)]
        [string]
        $TFSProjectName,

        [Parameter(Mandatory=$false, Position=4)]
        [bool]
        $InheritParent = $true,
        
        [Parameter(Mandatory=$true, Position=5)]
        [string]
        $ReportServerUri,
        
        [Parameter(Mandatory=$true, Position=6)]
        [string]
        $ProjectReportsPath,
        
        [Parameter(Mandatory=$false, Position=7)]
        [PSCredential]
        $UserCredential
    )
    #endregion Parameters
    Begin {
        if ($UserCredential -eq $null) {
            $cred = Get-Credential -Message "Supply TFS install account credentials."
            $UserCredential = $cred
        }
        $isConfigured = $false
    }
    Process {
        $resultObject = @{}
        
        try {
            if ($UserCredential -eq $null) {
                #$proxy = New-WebServiceProxy -Uri $ReportServerUri -ErrorAction Stop -UseDefaultCredential Namespace SSRS2010 
                $proxy = New-WebServiceProxy -Uri $ReportServerUri -ErrorAction Stop -UseDefaultCredential 
            }
            else {
                #$proxy = New-WebServiceProxy -Uri $ReportServerUri -ErrorAction Stop -Credential $UserCredential Namespace SSRS2010 
                $proxy = New-WebServiceProxy -Uri $ReportServerUri -ErrorAction Stop -Credential $UserCredential
            }
            
            #get autogenerated namespace
            $type = $proxy.GetType().Namespace
            $policyDatatype = ($type + '.Policy')

            #[SSRS2010.CatalogItem[]]$catalogItems = $proxy.ListChildren($ProjectReportsPath, $false)
            $catalogItems = $proxy.ListChildren($ProjectReportsPath, $false)
            foreach($folder in $catalogItems) {
                if($folder.TypeName -eq 'Folder') {
                    if($folder.Name -eq $TFSProjectName) {
                        #[SSRS2010.Policy[]]$policies = $proxy.GetPolicies($folder.Path, [ref]$InheritParent)
                        $policies = $proxy.GetPolicies($folder.Path, [ref]$InheritParent)
#                       if(-not $InheritParent) {
#                           $Proxy.InheritParentSecurity($folder.Path)
#                       }
                        #$policy = New-Object -TypeName SSRS2010.Policy
                        $policy = New-Object ($policyDatatype)
                        $policy.GroupUserName = $GroupUserName
                        $roles = @()
                        foreach ($role in $GroupUserRoles) {
                            $roles += $Proxy.ListRoles("Catalog", $null) | Where-Object {$_.name -eq "$role"}
                        }
                        $policy.Roles = $roles
                        $policies += $policy
                        $resultObject.Status = $proxy.SetPolicies($folder.Path, $policies)
                        
                        #$permissions = $Proxy.ListTasks("Catalog")
                        #$rolePermissionsIds = $permissions  | Select-Object -ExpandProperty taskId
                        $isConfigured = $true
                        Write-Verbose -Message "SSRS security policies have been configured."
                        break    
                    }
                }
            }
        }
        catch {
            $resultObject.Exception = $_
        }
        finally {
            $Proxy = $null
            if($isConfigured -eq $true) {
                $resultObject.Status = "$GroupUserName configured on $TFSProjectName reprting site."
                #Write-Verbose -Message "$GroupUserName configured on $TFSProjectName."
            }
        }
        return $resultObject
    }
    End {}
}